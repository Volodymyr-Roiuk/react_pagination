{"version":3,"sources":["components/Pagination/Pagination.js","App.js","index.js"],"names":["PaginationWithContent","state","total","_this","props","perPage","page","todos","Array","fill","map","item","index","id","content","concat","activePage","selectOptions","value","text","handlePaginationChange","event","textContent","target","newActivePage","Number","setState","prevState","isNaN","handleSelectChange","newPerPage","_this$state","this","from","to","pageTodos","filter","todo","react_default","a","createElement","Fragment","className","List","celled","ordered","Item","key","length","Pagination","defaultActivePage","totalPages","onClick","Select","placeholder","options","onChange","PureComponent","defaultProps","App","Pagination_Pagination","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.685bbdc7.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\nimport { Pagination, List, Select } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nclass PaginationWithContent extends PureComponent {\n  state = {\n    total: this.props.total,\n    perPage: this.props.perPage,\n    page: this.props.page,\n    todos: Array(this.props.total * this.props.perPage)\n      .fill('').map((item, index) => ({\n        id: index + 1,\n        content: `Todo №${index + 1}`,\n      })),\n    activePage: this.props.page,\n    selectOptions: Array(5).fill('')\n      .map((item, index) => ({\n        value: (index + 1) * 5,\n        text: (index + 1) * 5,\n      })),\n  }\n\n  handlePaginationChange = (event) => {\n    const { target: { textContent } } = event;\n    let newActivePage = Number(textContent);\n\n    this.setState((prevState) => {\n      if (isNaN(newActivePage)) {\n        const { activePage, total } = prevState;\n\n        if (textContent === '⟨' && activePage > 1) {\n          newActivePage = prevState.activePage - 1;\n        } else if (textContent === '«') {\n          newActivePage = 1;\n        } else if (textContent === '⟩' && activePage < total) {\n          newActivePage = prevState.activePage + 1;\n        } else if (textContent === '»') {\n          newActivePage = total;\n        } else {\n          return;\n        }\n      }\n\n      return ({\n        activePage: newActivePage,\n      });\n    });\n  };\n\n  handleSelectChange = (event) => {\n    const { target: { textContent } } = event;\n\n    this.setState((prevState) => {\n      let newPerPage = prevState;\n\n      if (Number(textContent) !== newPerPage) {\n        newPerPage = Number(textContent);\n      }\n\n      return ({\n        perPage: newPerPage,\n        todos: Array(this.props.total * newPerPage)\n          .fill('').map((item, index) => ({\n            id: index + 1,\n            content: `Todo №${index + 1}`,\n          })),\n      });\n    });\n  }\n\n  render() {\n    const { total, perPage, page, todos, activePage, selectOptions } = this.state;\n    const from = activePage !== 1 ? (activePage - 1) * perPage : 0;\n    const to = activePage !== 1 ? (activePage - 1) * perPage + perPage : perPage;\n    const pageTodos = todos.filter((todo, index) => index >= from && index < to);\n\n    return (\n      <>\n        <div className=\"pageContent\">\n          <List celled ordered>\n            {pageTodos.map(todo => <List.Item key={todo.id}>{todo.content}</List.Item>)}\n          </List>\n          <p className=\"todosOnPage\">{`todos: ${from + 1} - ${to} of ${todos.length}`}</p>\n          <Pagination defaultActivePage={page} totalPages={total} onClick={this.handlePaginationChange} />\n          <br />\n          <br />\n          <Select\n            placeholder=\"Select how much todos show per page\"\n            options={selectOptions}\n            onChange={this.handleSelectChange}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nPaginationWithContent.propTypes = {\n  total: PropTypes.number.isRequired,\n  perPage: PropTypes.number,\n  page: PropTypes.number,\n};\n\nPaginationWithContent.defaultProps = {\n  perPage: 5,\n  page: 1,\n}\n\nexport default PaginationWithContent;\n","import React from 'react';\nimport './App.css';\nimport PaginationWithContent from './components/Pagination/Pagination';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PaginationWithContent total={42} perPage={5} page={5} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}